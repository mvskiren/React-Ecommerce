{"ast":null,"code":"var _jsxFileName = \"/Users/saikiran/Desktop/Mojo-Ecommerce/react-ecommerce/src/components/Checkout.js\";\nimport React from \"react\";\nimport { Container, Box, Button, Heading, Text, TextField } from \"gestalt\";\nimport ToastMessage from \"./ToastMessage\";\nimport Axios from 'axios';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport { Elements, StripeProvider, CardElement, injectStripe } from 'react-stripe-elements';\nimport { getcart, calcPrice, clearCart, calculateAmount } from \"../utils\";\nimport HashLoader from \"react-spinners/HashLoader\";\nconst apiUrl = 'https://strapi-mangodb.herokuapp.com'; //|| process.env.API_URL || 'http://localhost:1337'  \n\nconst strapi = new Strapi(apiUrl);\n\nclass _CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cartItems: [],\n      address: \"\",\n      postalCode: \"\",\n      city: \"\",\n      confirmationEmailAddress: \"\",\n      toast: false,\n      toastMessage: \"\",\n      orderProcessing: false,\n      emailSent: false,\n      email: \"kiranmvs03@gmail.com\",\n      message: \"sai working man\",\n      laoding: true,\n      discount: 0\n    };\n\n    this.handleChange = ({\n      event,\n      value\n    }) => {\n      event.persist();\n      this.setState({\n        [event.target.name]: value\n      });\n    };\n\n    this.handleConfirmOrder = async event => {\n      event.preventDefault();\n\n      if (this.isFormEmpty(this.state)) {\n        this.showToast(\"Fill in all fields\");\n        return;\n      }\n    };\n\n    this.handleSubmitOrder = async () => {\n      this.setState({\n        loading: false\n      });\n      const {\n        cartItems,\n        city,\n        address,\n        postalCode\n      } = this.state;\n      const amount = calculateAmount(cartItems);\n      let token;\n\n      try {\n        const response = await this.props.stripe.createToken();\n        token = response.token.id; // const response = await this.props.stripe.createToken();\n\n        await strapi.createEntry(\"orders\", {\n          amount,\n          details: cartItems,\n          city,\n          postalCode,\n          address,\n          token\n        });\n        this.setState({\n          loading: true\n        });\n        clearCart();\n        this.showToast(\"Your order has been successfully submitted!\"); ///adding sendgrid request thogh axios\n        //  Axios.post('http://localhost:3030/api/email', this.state)\n        //  .then(res => {\n        //      if(res.data.success) {\n        //          this.setState({\n        //              emailSent: true\n        //          });\n        //      } else {\n        //          this.setState({\n        //              emailSent: false\n        //          });\n        //      }\n        //  })\n        //  .catch(err => {\n        //      console.log(err.message);\n        //      this.setState({\n        //          emailSent: false\n        //      });\n        //  })\n        ///clsoing request\n      } catch (err) {\n        this.showToast(err.message);\n      }\n    };\n\n    this.isFormEmpty = ({\n      address,\n      postalCode,\n      city,\n      confirmationEmailAddress\n    }) => {\n      return !address || !postalCode || !city || !confirmationEmailAddress;\n    };\n\n    this.showToast = toastMessage => {\n      this.setState({\n        toast: true,\n        toastMessage\n      });\n      setTimeout(() => this.setState({\n        toast: false,\n        toastMessage: \"\"\n      }), 5000);\n    };\n\n    this.coupon = async event => {\n      if (event.target.value.contains(\"hello\")) {\n        this.setState({\n          discount: 1000\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      cartItems: getcart()\n    });\n  }\n\n  render() {\n    const {\n      toast,\n      toastMessage,\n      cartItems\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      color: \"darkWash\",\n      margin: 4,\n      padding: 4,\n      shape: \"rounded\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      direction: \"column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Heading, {\n      color: \"midnight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, \"Checkout\"), cartItems.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      direction: \"column\",\n      marginTop: 2,\n      marginBottom: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"darkGray\",\n      italic: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, cartItems.length, \" Items for Checkout\"), /*#__PURE__*/React.createElement(Box, {\n      padding: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, cartItems.map(item => /*#__PURE__*/React.createElement(Box, {\n      key: item._id,\n      padding: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      color: \"midnight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 23\n      }\n    }, item.quantity * item.Price, \"Rs/-\")))), /*#__PURE__*/React.createElement(Text, {\n      bold: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, \"Total Amount: \", calcPrice(cartItems) - this.discount), \"Apply Coupon Code:  \", /*#__PURE__*/React.createElement(TextField, {\n      id: \"postalCode\",\n      type: \"text\",\n      name: \"postalCode\",\n      placeholder: \"Enter your code here\",\n      onChange: this.coupon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"form\", {\n      style: {\n        display: \"inlineBlock\",\n        textAlign: \"center\",\n        maxWidth: 450\n      },\n      onSubmit: this.handleConfirmOrder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"address\",\n      type: \"text\",\n      name: \"address\",\n      placeholder: \"Shipping Address\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"postalCode\",\n      type: \"number\",\n      name: \"postalCode\",\n      placeholder: \"Postal Code\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"city\",\n      type: \"text\",\n      name: \"city\",\n      placeholder: \"City of Residence\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"confirmationEmailAddress\",\n      type: \"email\",\n      name: \"confirmationEmailAddress\",\n      placeholder: \"Confirmation Email Address\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CardElement, {\n      id: \"Stripe__input\",\n      onReady: input => input.focus(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"stripe__button\",\n      type: \"submit\",\n      onClick: this.handleSubmitOrder,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, \"Submit\"))) :\n    /*#__PURE__*/\n    // Default Text if No Items in Cart\n    React.createElement(Box, {\n      color: \"darkWash\",\n      shape: \"rounded\",\n      padding: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Heading, {\n      align: \"center\",\n      color: \"watermelon\",\n      size: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }\n    }, \"Your Cart is Empty\"), /*#__PURE__*/React.createElement(Text, {\n      align: \"center\",\n      italic: true,\n      color: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    }, \"Add some brews!\"))), /*#__PURE__*/React.createElement(ToastMessage, {\n      show: toast,\n      message: toastMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst CheckoutForm = injectStripe(_CheckoutForm);\n\nconst Checkout = () => /*#__PURE__*/React.createElement(StripeProvider, {\n  apiKey: \"pk_test_kY6IT8I2ZZjVhwkZgn1Eno0H00uYWO66ym\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Elements, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(CheckoutForm, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 3\n  }\n})));\n\nexport default Checkout;","map":{"version":3,"sources":["/Users/saikiran/Desktop/Mojo-Ecommerce/react-ecommerce/src/components/Checkout.js"],"names":["React","Container","Box","Button","Heading","Text","TextField","ToastMessage","Axios","Strapi","Elements","StripeProvider","CardElement","injectStripe","getcart","calcPrice","clearCart","calculateAmount","HashLoader","apiUrl","strapi","_CheckoutForm","Component","state","cartItems","address","postalCode","city","confirmationEmailAddress","toast","toastMessage","orderProcessing","emailSent","email","message","laoding","discount","handleChange","event","value","persist","setState","target","name","handleConfirmOrder","preventDefault","isFormEmpty","showToast","handleSubmitOrder","loading","amount","token","response","props","stripe","createToken","id","createEntry","details","err","setTimeout","coupon","contains","componentDidMount","render","length","map","item","_id","quantity","Price","display","textAlign","maxWidth","input","focus","CheckoutForm","Checkout"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container, Box, Button, Heading, Text, TextField } from \"gestalt\";\nimport ToastMessage from \"./ToastMessage\";\nimport Axios from 'axios';\nimport Strapi from 'strapi-sdk-javascript/build/main';\nimport {Elements,StripeProvider,CardElement,injectStripe} from 'react-stripe-elements';\nimport { getcart, calcPrice,clearCart,calculateAmount } from \"../utils\";\nimport HashLoader from \"react-spinners/HashLoader\";\n\nconst apiUrl='https://strapi-mangodb.herokuapp.com' ; //|| process.env.API_URL || 'http://localhost:1337'  \nconst strapi =new Strapi(apiUrl);\n\nclass _CheckoutForm extends React.Component {\n  state = {\n    cartItems: [],\n    address: \"\",\n    postalCode: \"\",\n    city: \"\",\n    confirmationEmailAddress: \"\",\n    toast: false,\n    toastMessage: \"\",\n    orderProcessing: false,\n    emailSent: false,\n    email: \"kiranmvs03@gmail.com\",\n    message: \"sai working man\",\n    laoding: true,\n    discount: 0\n  };\n\n  componentDidMount() {\n    this.setState({ cartItems: getcart() });\n   \n  }\n\n  handleChange = ({ event, value }) => {\n    event.persist();\n    this.setState({ [event.target.name]: value });\n  };\n\n  handleConfirmOrder = async event => {\n    event.preventDefault();\n\n    if (this.isFormEmpty(this.state)) {\n      this.showToast(\"Fill in all fields\");\n      return;\n    }\n  };\n  handleSubmitOrder=async ()=>{\n    this.setState({loading: false});\n    const {cartItems,city,address,postalCode}=this.state;\n    const amount =calculateAmount(cartItems);\n  \n    let token;\n    try {\n  const response=await this.props.stripe.createToken();\n  token=response.token.id;\n      // const response = await this.props.stripe.createToken();\n      \n    \n      await strapi.createEntry(\"orders\", {\n        amount,\n        details: cartItems, \n        city,\n        postalCode,\n        address,\n        token\n        \n      \n      \n  \n      });\n      this.setState({loading: true});\n       \n      clearCart();\n      this.showToast(\"Your order has been successfully submitted!\");\n\n     ///adding sendgrid request thogh axios\n\n    //  Axios.post('http://localhost:3030/api/email', this.state)\n    //  .then(res => {\n    //      if(res.data.success) {\n    //          this.setState({\n                \n    //              emailSent: true\n    //          });\n    //      } else {\n    //          this.setState({\n                 \n    //              emailSent: false\n    //          });\n    //      }\n    //  })\n    //  .catch(err => {\n    //      console.log(err.message);\n\n    //      this.setState({\n             \n    //          emailSent: false\n    //      });\n    //  })\n\n\n     ///clsoing request\n\n\n\n    } catch (err) {\n      this.showToast(err.message);\n    }\n  };\n\n\n  isFormEmpty = ({ address, postalCode, city, confirmationEmailAddress }) => {\n    return !address || !postalCode || !city || !confirmationEmailAddress;\n  };\n\n  showToast = toastMessage => {\n    this.setState({ toast: true, toastMessage });\n    setTimeout(() => this.setState({ toast: false, toastMessage: \"\" }), 5000);\n  };\n  coupon =async (event)=>{\n    if(event.target.value.contains(\"hello\")){\n     this.setState({discount:1000});\n    }\n  \n  }\n \n  render() {\n    const { toast, toastMessage, cartItems } = this.state;\n\n    return (\n      \n      <Container>\n        <Box\n          color=\"darkWash\"\n          margin={4}\n          padding={4}\n          shape=\"rounded\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          direction=\"column\"\n        >\n          {/* Checkout Form Heading */}\n          <Heading color=\"midnight\">Checkout</Heading>\n          {cartItems.length > 0 ? (\n            <React.Fragment>\n              {/* User Cart */}\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                direction=\"column\"\n                marginTop={2}\n                marginBottom={6}\n              >\n                <Text color=\"darkGray\" italic>\n                  {cartItems.length} Items for Checkout\n                </Text>\n                <Box padding={2}>\n                  {cartItems.map(item => (\n                    <Box key={item._id} padding={1}>\n                      <Text color=\"midnight\">\n                         {item.quantity * item.Price}Rs/-\n                      </Text>\n                    </Box>\n                  ))}\n                </Box>\n                <Text bold>Total Amount: {calcPrice(cartItems)-this.discount}</Text>\n                Apply Coupon Code:  <TextField\n                  id=\"postalCode\"\n                  type=\"text\"\n                  name=\"postalCode\"\n                  placeholder=\"Enter your code here\"\n                  onChange={this.coupon}\n                />\n              </Box>\n              {/* Checkout Form */}\n              <form\n                style={{\n                  display: \"inlineBlock\",\n                  textAlign: \"center\",\n                  maxWidth: 450\n                }}\n                onSubmit={this.handleConfirmOrder}\n              >\n                {/* Shipping Address Input */}\n                <TextField\n                  id=\"address\"\n                  type=\"text\"\n                  name=\"address\"\n                  placeholder=\"Shipping Address\"\n                  onChange={this.handleChange}\n                />\n                {/* Postal Code Input */}\n                <TextField\n                  id=\"postalCode\"\n                  type=\"number\"\n                  name=\"postalCode\"\n                  placeholder=\"Postal Code\"\n                  onChange={this.handleChange}\n                />\n                {/* City Input */}\n                <TextField\n                  id=\"city\"\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"City of Residence\"\n                  onChange={this.handleChange}\n                />\n                {/* Confirmation Email Address Input */}\n                <TextField\n                  id=\"confirmationEmailAddress\"\n                  type=\"email\"\n                  name=\"confirmationEmailAddress\"\n                  placeholder=\"Confirmation Email Address\"\n                  onChange={this.handleChange}\n                />\n\n                {/*  card elemt */}\n                <CardElement id=\"Stripe__input\" onReady={input =>input.focus()} />\n                 \n                <button id=\"stripe__button\" type=\"submit\" onClick={this.handleSubmitOrder}>\n                  Submit \n                </button>\n              </form>\n            </React.Fragment>\n          ) : (\n            // Default Text if No Items in Cart\n            <Box color=\"darkWash\" shape=\"rounded\" padding={4}>\n              <Heading align=\"center\" color=\"watermelon\" size=\"xs\">\n                Your Cart is Empty\n              </Heading>\n              <Text align=\"center\" italic color=\"green\">\n                Add some brews!\n              </Text>\n            </Box>\n          )}\n        </Box>\n        <ToastMessage show={toast} message={toastMessage} />\n      </Container>\n      \n    );\n    \n  }\n}\nconst CheckoutForm=injectStripe(_CheckoutForm);\nconst Checkout=()=>(\n  <StripeProvider apiKey=\"pk_test_kY6IT8I2ZZjVhwkZgn1Eno0H00uYWO66ym\">\n  <Elements>\n  <CheckoutForm />\n  </Elements>\n  </StripeProvider>\n\n);\n\n\nexport default Checkout;\n"]},"metadata":{},"sourceType":"module"}