{"ast":null,"code":"export function loopAsync(turns, work, callback) {\n  var currentTurn = 0,\n      isDone = false;\n  var sync = false,\n      hasNext = false,\n      doneArgs = void 0;\n\n  function done() {\n    isDone = true;\n\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      doneArgs = [].concat(Array.prototype.slice.call(arguments));\n      return;\n    }\n\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) {\n      return;\n    }\n\n    hasNext = true;\n\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      return;\n    }\n\n    sync = true;\n\n    while (!isDone && currentTurn < turns && hasNext) {\n      hasNext = false;\n      work.call(this, currentTurn++, next, done);\n    }\n\n    sync = false;\n\n    if (isDone) {\n      // This means the loop finished synchronously.\n      callback.apply(this, doneArgs);\n      return;\n    }\n\n    if (currentTurn >= turns && hasNext) {\n      isDone = true;\n      callback();\n    }\n  }\n\n  next();\n}\nexport function mapAsync(array, work, callback) {\n  var length = array.length;\n  var values = [];\n  if (length === 0) return callback(null, values);\n  var isDone = false,\n      doneCount = 0;\n\n  function done(index, error, value) {\n    if (isDone) return;\n\n    if (error) {\n      isDone = true;\n      callback(error);\n    } else {\n      values[index] = value;\n      isDone = ++doneCount === length;\n      if (isDone) callback(null, values);\n    }\n  }\n\n  array.forEach(function (item, index) {\n    work(item, index, function (error, value) {\n      done(index, error, value);\n    });\n  });\n}","map":{"version":3,"sources":["/Users/saikiran/Desktop/Mojo-Ecommerce/react-ecommerce/node_modules/react-router/es/AsyncUtils.js"],"names":["loopAsync","turns","work","callback","currentTurn","isDone","sync","hasNext","doneArgs","done","concat","Array","prototype","slice","call","arguments","apply","next","mapAsync","array","length","values","doneCount","index","error","value","forEach","item"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,QAAhC,EAA0C;AAC/C,MAAIC,WAAW,GAAG,CAAlB;AAAA,MACIC,MAAM,GAAG,KADb;AAEA,MAAIC,IAAI,GAAG,KAAX;AAAA,MACIC,OAAO,GAAG,KADd;AAAA,MAEIC,QAAQ,GAAG,KAAK,CAFpB;;AAIA,WAASC,IAAT,GAAgB;AACdJ,IAAAA,MAAM,GAAG,IAAT;;AACA,QAAIC,IAAJ,EAAU;AACR;AACAE,MAAAA,QAAQ,GAAG,GAAGE,MAAH,CAAUC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAV,CAAX;AACA;AACD;;AAEDZ,IAAAA,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBD,SAArB;AACD;;AAED,WAASE,IAAT,GAAgB;AACd,QAAIZ,MAAJ,EAAY;AACV;AACD;;AAEDE,IAAAA,OAAO,GAAG,IAAV;;AACA,QAAID,IAAJ,EAAU;AACR;AACA;AACD;;AAEDA,IAAAA,IAAI,GAAG,IAAP;;AAEA,WAAO,CAACD,MAAD,IAAWD,WAAW,GAAGH,KAAzB,IAAkCM,OAAzC,EAAkD;AAChDA,MAAAA,OAAO,GAAG,KAAV;AACAL,MAAAA,IAAI,CAACY,IAAL,CAAU,IAAV,EAAgBV,WAAW,EAA3B,EAA+Ba,IAA/B,EAAqCR,IAArC;AACD;;AAEDH,IAAAA,IAAI,GAAG,KAAP;;AAEA,QAAID,MAAJ,EAAY;AACV;AACAF,MAAAA,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBR,QAArB;AACA;AACD;;AAED,QAAIJ,WAAW,IAAIH,KAAf,IAAwBM,OAA5B,EAAqC;AACnCF,MAAAA,MAAM,GAAG,IAAT;AACAF,MAAAA,QAAQ;AACT;AACF;;AAEDc,EAAAA,IAAI;AACL;AAED,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBjB,IAAzB,EAA+BC,QAA/B,EAAyC;AAC9C,MAAIiB,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,MAAIC,MAAM,GAAG,EAAb;AAEA,MAAID,MAAM,KAAK,CAAf,EAAkB,OAAOjB,QAAQ,CAAC,IAAD,EAAOkB,MAAP,CAAf;AAElB,MAAIhB,MAAM,GAAG,KAAb;AAAA,MACIiB,SAAS,GAAG,CADhB;;AAGA,WAASb,IAAT,CAAcc,KAAd,EAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACjC,QAAIpB,MAAJ,EAAY;;AAEZ,QAAImB,KAAJ,EAAW;AACTnB,MAAAA,MAAM,GAAG,IAAT;AACAF,MAAAA,QAAQ,CAACqB,KAAD,CAAR;AACD,KAHD,MAGO;AACLH,MAAAA,MAAM,CAACE,KAAD,CAAN,GAAgBE,KAAhB;AAEApB,MAAAA,MAAM,GAAG,EAAEiB,SAAF,KAAgBF,MAAzB;AAEA,UAAIf,MAAJ,EAAYF,QAAQ,CAAC,IAAD,EAAOkB,MAAP,CAAR;AACb;AACF;;AAEDF,EAAAA,KAAK,CAACO,OAAN,CAAc,UAAUC,IAAV,EAAgBJ,KAAhB,EAAuB;AACnCrB,IAAAA,IAAI,CAACyB,IAAD,EAAOJ,KAAP,EAAc,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACxChB,MAAAA,IAAI,CAACc,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAJ;AACD,KAFG,CAAJ;AAGD,GAJD;AAKD","sourcesContent":["export function loopAsync(turns, work, callback) {\n  var currentTurn = 0,\n      isDone = false;\n  var sync = false,\n      hasNext = false,\n      doneArgs = void 0;\n\n  function done() {\n    isDone = true;\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      doneArgs = [].concat(Array.prototype.slice.call(arguments));\n      return;\n    }\n\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) {\n      return;\n    }\n\n    hasNext = true;\n    if (sync) {\n      // Iterate instead of recursing if possible.\n      return;\n    }\n\n    sync = true;\n\n    while (!isDone && currentTurn < turns && hasNext) {\n      hasNext = false;\n      work.call(this, currentTurn++, next, done);\n    }\n\n    sync = false;\n\n    if (isDone) {\n      // This means the loop finished synchronously.\n      callback.apply(this, doneArgs);\n      return;\n    }\n\n    if (currentTurn >= turns && hasNext) {\n      isDone = true;\n      callback();\n    }\n  }\n\n  next();\n}\n\nexport function mapAsync(array, work, callback) {\n  var length = array.length;\n  var values = [];\n\n  if (length === 0) return callback(null, values);\n\n  var isDone = false,\n      doneCount = 0;\n\n  function done(index, error, value) {\n    if (isDone) return;\n\n    if (error) {\n      isDone = true;\n      callback(error);\n    } else {\n      values[index] = value;\n\n      isDone = ++doneCount === length;\n\n      if (isDone) callback(null, values);\n    }\n  }\n\n  array.forEach(function (item, index) {\n    work(item, index, function (error, value) {\n      done(index, error, value);\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}