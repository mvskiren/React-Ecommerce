{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;\n\nvar _BrowserProtocol = require('./BrowserProtocol');\n\nObject.defineProperty(exports, 'getUserConfirmation', {\n  enumerable: true,\n  get: function get() {\n    return _BrowserProtocol.getUserConfirmation;\n  }\n});\nObject.defineProperty(exports, 'go', {\n  enumerable: true,\n  get: function get() {\n    return _BrowserProtocol.go;\n  }\n});\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _LocationUtils = require('./LocationUtils');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _PathUtils = require('./PathUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HashChangeEvent = 'hashchange';\n\nvar getHashPath = function getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n};\n\nvar pushHashPath = function pushHashPath(path) {\n  return window.location.hash = path;\n};\n\nvar replaceHashPath = function replaceHashPath(path) {\n  var hashIndex = window.location.href.indexOf('#');\n  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);\n};\n\nvar getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {\n  var path = pathCoder.decodePath(getHashPath());\n  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);\n  var state = void 0;\n\n  if (key) {\n    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);\n    state = (0, _DOMStateStorage.readState)(key);\n  }\n\n  var init = (0, _PathUtils.parsePath)(path);\n  init.state = state;\n  return (0, _LocationUtils.createLocation)(init, undefined, key);\n};\n\nvar prevLocation = void 0;\n\nvar startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {\n  var handleHashChange = function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = pathCoder.encodePath(path);\n\n    if (path !== encodedPath) {\n      // Always be sure we have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var currentLocation = getCurrentLocation(pathCoder, queryKey);\n      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events\n\n      prevLocation = currentLocation;\n      listener(currentLocation);\n    }\n  }; // Ensure the hash is encoded properly.\n\n\n  var path = getHashPath();\n  var encodedPath = pathCoder.encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);\n  return function () {\n    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);\n  };\n};\n\nvar updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {\n  var state = location.state,\n      key = location.key;\n  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));\n\n  if (state !== undefined) {\n    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);\n    (0, _DOMStateStorage.saveState)(key, state);\n  }\n\n  prevLocation = location;\n  updateHash(path);\n};\n\nvar pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {\n  return updateLocation(location, pathCoder, queryKey, function (path) {\n    if (getHashPath() !== path) {\n      pushHashPath(path);\n    } else {\n      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;\n    }\n  });\n};\n\nvar replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {\n  return updateLocation(location, pathCoder, queryKey, function (path) {\n    if (getHashPath() !== path) replaceHashPath(path);\n  });\n};","map":{"version":3,"sources":["/Users/saikiran/Desktop/Mojo-Ecommerce/react-ecommerce/node_modules/react-router/node_modules/history/lib/HashProtocol.js"],"names":["exports","__esModule","replaceLocation","pushLocation","startListener","getCurrentLocation","go","getUserConfirmation","undefined","_BrowserProtocol","require","Object","defineProperty","enumerable","get","_warning","_warning2","_interopRequireDefault","_LocationUtils","_DOMUtils","_DOMStateStorage","_PathUtils","obj","default","HashChangeEvent","getHashPath","href","window","location","hashIndex","indexOf","substring","pushHashPath","path","hash","replaceHashPath","replace","slice","pathCoder","queryKey","decodePath","key","getQueryStringValueFromPath","state","stripQueryStringValueFromPath","readState","init","parsePath","createLocation","prevLocation","listener","handleHashChange","encodedPath","encodePath","currentLocation","addEventListener","removeEventListener","updateLocation","updateHash","createPath","addQueryStringValueToPath","saveState","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.replaceLocation = exports.pushLocation = exports.startListener = exports.getCurrentLocation = exports.go = exports.getUserConfirmation = undefined;\n\nvar _BrowserProtocol = require('./BrowserProtocol');\n\nObject.defineProperty(exports, 'getUserConfirmation', {\n  enumerable: true,\n  get: function get() {\n    return _BrowserProtocol.getUserConfirmation;\n  }\n});\nObject.defineProperty(exports, 'go', {\n  enumerable: true,\n  get: function get() {\n    return _BrowserProtocol.go;\n  }\n});\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _LocationUtils = require('./LocationUtils');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _PathUtils = require('./PathUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HashChangeEvent = 'hashchange';\n\nvar getHashPath = function getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n};\n\nvar pushHashPath = function pushHashPath(path) {\n  return window.location.hash = path;\n};\n\nvar replaceHashPath = function replaceHashPath(path) {\n  var hashIndex = window.location.href.indexOf('#');\n\n  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);\n};\n\nvar getCurrentLocation = exports.getCurrentLocation = function getCurrentLocation(pathCoder, queryKey) {\n  var path = pathCoder.decodePath(getHashPath());\n  var key = (0, _PathUtils.getQueryStringValueFromPath)(path, queryKey);\n\n  var state = void 0;\n  if (key) {\n    path = (0, _PathUtils.stripQueryStringValueFromPath)(path, queryKey);\n    state = (0, _DOMStateStorage.readState)(key);\n  }\n\n  var init = (0, _PathUtils.parsePath)(path);\n  init.state = state;\n\n  return (0, _LocationUtils.createLocation)(init, undefined, key);\n};\n\nvar prevLocation = void 0;\n\nvar startListener = exports.startListener = function startListener(listener, pathCoder, queryKey) {\n  var handleHashChange = function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = pathCoder.encodePath(path);\n\n    if (path !== encodedPath) {\n      // Always be sure we have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var currentLocation = getCurrentLocation(pathCoder, queryKey);\n\n      if (prevLocation && currentLocation.key && prevLocation.key === currentLocation.key) return; // Ignore extraneous hashchange events\n\n      prevLocation = currentLocation;\n\n      listener(currentLocation);\n    }\n  };\n\n  // Ensure the hash is encoded properly.\n  var path = getHashPath();\n  var encodedPath = pathCoder.encodePath(path);\n\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n\n  (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);\n\n  return function () {\n    return (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);\n  };\n};\n\nvar updateLocation = function updateLocation(location, pathCoder, queryKey, updateHash) {\n  var state = location.state,\n      key = location.key;\n\n\n  var path = pathCoder.encodePath((0, _PathUtils.createPath)(location));\n\n  if (state !== undefined) {\n    path = (0, _PathUtils.addQueryStringValueToPath)(path, queryKey, key);\n    (0, _DOMStateStorage.saveState)(key, state);\n  }\n\n  prevLocation = location;\n\n  updateHash(path);\n};\n\nvar pushLocation = exports.pushLocation = function pushLocation(location, pathCoder, queryKey) {\n  return updateLocation(location, pathCoder, queryKey, function (path) {\n    if (getHashPath() !== path) {\n      pushHashPath(path);\n    } else {\n      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'You cannot PUSH the same path using hash history') : void 0;\n    }\n  });\n};\n\nvar replaceLocation = exports.replaceLocation = function replaceLocation(location, pathCoder, queryKey) {\n  return updateLocation(location, pathCoder, queryKey, function (path) {\n    if (getHashPath() !== path) replaceHashPath(path);\n  });\n};"]},"metadata":{},"sourceType":"script"}